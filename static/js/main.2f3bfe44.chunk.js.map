{"version":3,"sources":["component/ColorPicker.js","component/SizeSetting.js","component/Result.js","component/Reset.js","App.js","reportWebVitals.js","index.js"],"names":["ColorPicker","props","state","colorList","color","className","this","currentColor","changeCurrentColor","elements","map","element","index","classNames","isActive","onClick","Component","SizeSetting","currentSize","changeCurrentSize","name","value","type","Result","style","fontSize","Reset","changeReset","App","setState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f3bfe44.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../css/style.css\";\r\nimport classNames from \"classnames\";\r\n\r\nexport default class ColorPicker extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      colorList: [\r\n        { color: 0, className: \"circle red\" },\r\n        { color: 1, className: \"circle green\"},\r\n        { color: 2, className: \"circle blue\" },\r\n        { color: 3, className: \"circle gray\" },\r\n      ],\r\n    };\r\n  }\r\n  render() {\r\n    var { currentColor, changeCurrentColor } = this.props;\r\n\r\n    \r\n\r\n    var elements = this.state.colorList.map((element, index) => {\r\n      return (\r\n        <div key={index} className=\"col-xs-1 col-sm-1 col-md-1 col-lg-1\">\r\n          <span\r\n            className={classNames(element.className, {\r\n              isActive: currentColor === element.color,\r\n            })}\r\n            onClick={() => {\r\n              changeCurrentColor(element.color);\r\n            }}\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"ColorPicker\">\r\n        <div className=\"panel panel-success\">\r\n          <div className=\"panel-heading\">\r\n            <h3 className=\"panel-title\">Color Picker</h3>\r\n          </div>\r\n          <div className=\"panel-body\">\r\n            {elements}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"../css/style.css\";\r\n\r\nexport default class SizeSetting extends Component {\r\n  render() {\r\n    \r\n    var { currentSize, changeCurrentSize} = this.props;\r\n    var listButton = [\r\n      { name: \"Down\", value: -2 },\r\n      { name: \"Up\", value: 2 },\r\n    ];\r\n\r\n    var elements = listButton.map((element, index) => {\r\n      return (\r\n        <button\r\n          key={index}\r\n          type=\"button\"\r\n          className=\"btn btn-danger mg-right\"\r\n          onClick={() => {\r\n            changeCurrentSize(element.value);\r\n          }}\r\n        >\r\n          {element.name}\r\n        </button>\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"SizeSetting\">\r\n        <div className=\"panel panel-default\">\r\n          <div className=\"panel-heading\">\r\n            <h3 className=\"panel-title\">Size: {currentSize}px</h3>\r\n          </div>\r\n          <div className=\"panel-body\">\r\n            {elements}\r\n          </div>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Result extends Component {\r\n  render() {\r\n    var { currentSize, currentColor } = this.props;\r\n    return (\r\n      <div className=\"Result\">\r\n        <div className=\"panel panel-default\">\r\n          <div className=\"panel-heading\">\r\n            <h3 className=\"panel-title\">\r\n              Font size: {currentSize}px - Color:{\" \"}\r\n              {currentColor === 0\r\n                ? \"red\"\r\n                : currentColor === 1\r\n                ? \"green\"\r\n                : currentColor === 2\r\n                ? \"blue\"\r\n                : \"gray\"}\r\n            </h3>\r\n          </div>\r\n          <div\r\n            className=\"panel-body df\"\r\n            style={{\r\n              fontSize: currentSize + \"px\",\r\n              color:\r\n                currentColor === 0\r\n                  ? \"red\"\r\n                  : currentColor === 1\r\n                  ? \"green\"\r\n                  : currentColor === 2\r\n                  ? \"blue\"\r\n                  : \"gray\",\r\n            }}\r\n          >\r\n            This HTML file is a template.If you open it directly in the browser,\r\n            you will see an empty page. You can add webfonts, meta tags, or\r\n            analytics to this file. The build step will place the bundled\r\n            scripts into the tag. To begin the development, run `npm start` or\r\n            `yarn start`. To create a production bundle, use `npm run build` or\r\n            `yarn build`.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Reset extends Component {\r\n    render() {\r\n        var {changeReset} = this.props;\r\n        return (\r\n            <div className='Reset'>\r\n                <button type=\"button\" className=\"btn btn-primary mg-bt\" onClick={()=>{changeReset()}}>RESET</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\nimport ColorPicker from \"./component/ColorPicker\";\n\nimport \"./App.css\";\nimport SizeSetting from \"./component/SizeSetting\";\nimport Result from \"./component/Result\";\nimport Reset from \"./component/Reset\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentColor: 0,\n      currentSize: 12,\n    };\n  }\n\n  changeCurrentColor = (value) => {\n    this.setState({\n      currentColor: value,\n    });\n  };\n\n  changeCurrentSize = (value) => {\n    \n    if (this.state.currentSize !== 8 || value !== -2)\n      this.setState({\n        currentSize: this.state.currentSize + value,\n      });\n  };\n\n  changeReset = () => {\n    this.setState({\n      currentColor: 0,\n      currentSize: 12,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n              <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                <ColorPicker\n                  currentColor={this.state.currentColor}\n                  changeCurrentColor={this.changeCurrentColor}\n                />\n              </div>\n\n              <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                <SizeSetting\n                  currentSize={this.state.currentSize}\n                  changeCurrentSize={this.changeCurrentSize}\n                />\n                <Reset changeReset={this.changeReset}/>\n              </div>\n              \n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n              <Result\n                currentColor={this.state.currentColor}\n                currentSize={this.state.currentSize}\n              />\n            </div>\n          </div>\n        </div>\n\n        \n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}